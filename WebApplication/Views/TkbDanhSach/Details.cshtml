@model TkbDanhSach
@{
    ViewBag.Title = "Details";
    var ThongKe = ViewBag.ThongKe as List<TkbThongKe>;
    var GiangVien = ViewBag.GiangVien as List<TkbGiangVien>;
    var Colors = new Dictionary<string, string>();
    var Random = new Random();
    var COLORS = new List<string>(new string[] { "#00ffff", "#f0ffff", "#f5f5dc", "#000000", "#a52a2a", "#00ffff", "#ff00ff", "#ffd700", "#008000", "#4b0082", "#f0e68c", "#00ff00", "#ff00ff", "#800000", "#000080", "#808000", "#ffa500", "#ffc0cb", "#800080", "#800080", "#c0c0c0", "#ffff00", "#ffffff" });
    COLORS.AddRange(COLORS); COLORS.AddRange(COLORS); COLORS.AddRange(COLORS);
    var zIndex = 1;
}

<style>
    .body-content {
        width: 100% !important;
    }

    .row {
        margin-left: -5px !important;
        margin-right: -5px !important;
    }

    .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col-13, .col-14, .col-15 {
        float: left;
    }

    .col-1 {
        width: 6.666666667%;
    }

    .col-2 {
        width: 13.33333333%;
    }

    .col-3 {
        width: 20%;
    }

    .col-4 {
        width: 26.66666667%;
    }

    .col-5 {
        width: 33.33333333%;
    }

    .col-6 {
        width: 40%;
    }

    .col-7 {
        width: 46.66666667%;
    }

    .col-8 {
        width: 53.33333333%;
    }

    .col-9 {
        width: 60%;
    }

    .col-10 {
        width: 66.66666667%;
    }

    .col-11 {
        width: 73.33333333%;
    }

    .col-12 {
        width: 80%;
    }

    .col-13 {
        width: 86.66666667%;
    }

    .col-14 {
        width: 93.33333333%;
    }

    .col-15 {
        width: 100%;
    }

    .col-offset-1 {
        margin-left: 6.666666667%;
    }

    .col-offset-2 {
        margin-left: 13.33333333%;
    }

    .col-offset-3 {
        margin-left: 20%;
    }

    .col-offset-4 {
        margin-left: 26.66666667%;
    }

    .col-offset-5 {
        margin-left: 33.33333333%;
    }

    .col-offset-6 {
        margin-left: 40%;
    }

    .col-offset-7 {
        margin-left: 46.66666667%;
    }

    .col-offset-8 {
        margin-left: 53.33333333%;
    }

    .col-offset-9 {
        margin-left: 60%;
    }

    .col-offset-10 {
        margin-left: 66.66666667%;
    }

    .col-offset-11 {
        margin-left: 73.33333333%;
    }

    .col-offset-12 {
        margin-left: 80%;
    }

    .col-offset-13 {
        margin-left: 86.66666667%;
    }

    .col-offset-14 {
        margin-left: 93.33333333%;
    }

    .col-offset-15 {
        margin-left: 100%;
    }
</style>

<div>
    <h4>
        @Model.TenGoi
        <input id="checkColor" type="checkbox" checked data-toggle="toggle" data-on="Color" data-off="Color">
    </h4>
    @foreach (var monHoc in Model.TkbHocPhans.GroupBy(mh => mh.MaHP))
    {
        <a id="@monHoc.Key" href="#" onclick="toggle('@monHoc.Key')" style="display:none">@monHoc.First().TenHocPhan;</a>
    }
    <hr />
    <table id="table1" class="table table-bordered table-condensed table-hover table-striped" style="background-color:white">
        <thead>
            <tr>
                <th rowspan="2">Môn học</th>
                @for (int i = 2; i <= 7; i++)
                {
                    <th colspan="15" style="text-align:center">Thứ @i</th>
                }
            </tr>
            <tr>
                @for (int i = 0; i < 6; i++)
                {
                    for (int j = 1; j <= 15; j++)
                    {
                        <th style="font-family:monospace">
                            @switch (j)
                            {
                                case 10:
                                    @('J')
                                    break;
                                case 11:
                                    @('Q')
                                    break;
                                case 12:
                                    @('K')
                                    break;
                                case 13:
                                    @('D')
                                    break;
                                case 14:
                                    @('U')
                                    break;
                                case 15:
                                    @('Y')
                                    break;
                                default:
                                    @j
                                    break;
                            }
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody style="visibility:collapse">
            @foreach (var monHoc in Model.TkbHocPhans.GroupBy(hp => hp.MaHP))
            {
                <tr id="@monHoc.Key">
                    <td>
                        @(monHoc.First().VietTat ?? monHoc.First().TenHocPhan)
                    </td>
                    @for (int i = 2; i <= 7; i++)
                    {
                        <td colspan="15"></td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <table id="table2" class="table table-bordered table-condensed table-hover table-striped">
        <thead>
            <tr>
                <th rowspan="2">
                    <a href="#" onclick="toggleAll()">Môn học</a>
                </th>
                @for (int i = 2; i <= 7; i++)
                {
                    <th colspan="15" style="text-align:center">Thứ @i</th>
                }
            </tr>
            <tr>
                @for (int i = 0; i < 6; i++)
                {
                    for (int j = 1; j <= 15; j++)
                    {
                        <th style="font-family:monospace">
                            @switch (j)
                            {
                                case 10:
                                    @('J')
                                    break;
                                case 11:
                                    @('Q')
                                    break;
                                case 12:
                                    @('K')
                                    break;
                                case 13:
                                    @('D')
                                    break;
                                case 14:
                                    @('U')
                                    break;
                                case 15:
                                    @('Y')
                                    break;
                                default:
                                    @j
                                    break;
                            }
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var monHoc in Model.TkbHocPhans.GroupBy(hp => hp.MaHP))
            {
                var hash = new Dictionary<int, List<TkbHocPhan[]>>();
                foreach (var hocPhan in monHoc)
                {
                    if (!hash.ContainsKey(hocPhan.Thu))
                    {
                        hash[hocPhan.Thu] = new List<TkbHocPhan[]>();
                    }
                    var list = hash[hocPhan.Thu];
                    var done = false;
                    foreach (var row in list)
                    {
                        var found = true;
                        for (int i = 0; i < hocPhan.SoTiet; i++)
                        {
                            if (row[hocPhan.TietBatDau - 1 + i] != null)
                            {
                                found = false;
                            }
                        }
                        if (found == true)
                        {
                            for (int i = 0; i < hocPhan.SoTiet; i++)
                            {
                                row[hocPhan.TietBatDau - 1 + i] = hocPhan;
                            }
                            done = true;
                            break;
                        }
                    }
                    if (done == false)
                    {
                        var row = new TkbHocPhan[15];
                        for (int i = 0; i < hocPhan.SoTiet; i++)
                        {
                            row[hocPhan.TietBatDau - 1 + i] = hocPhan;
                        }
                        list.Add(row);
                    }
                }
                <tr id="@monHoc.Key">
                    <td>
                        <a href="#" title="@monHoc.First().TenHocPhan" onclick="toggle('@monHoc.Key')">@(monHoc.First().VietTat ?? monHoc.First().TenHocPhan)</a>
                    </td>
                    @for (int i = 2; i <= 7; i++)
                    {
                        var list = hash.ContainsKey(i) ? hash[i] : new List<TkbHocPhan[]>();
                        <td colspan="15">
                            @foreach (var row in list)
                            {
                                var offset = 0;
                                <div class="row">
                                    @for (int j = 0; j < row.Length; j++)
                                    {
                                        if (row[j] != null)
                                        {
                                            var thongKe = ThongKe.FirstOrDefault(tk => tk.MaHP == row[j].id);
                                            var giangVien = thongKe != null ? GiangVien.FirstOrDefault(gv => gv.MaGV.ToUpper() == thongKe.MaGV.ToUpper()) : null;
                                            if (!Colors.ContainsKey(row[j].NhomTo))
                                            {
                                                var index = Random.Next(COLORS.Count);
                                                var color = COLORS[index];
                                                COLORS.RemoveAt(index);
                                                Colors[row[j].NhomTo] = color;
                                            }
                                            var title = String.Format("{0}: T{1}-{2}~{3}; {4} ({5}SV)", row[j].NhomTo, row[j].Thu, row[j].TietBatDau, row[j].SoTiet, row[j].Phong, row[j].SoSV);
                                            var border = row[j].SoSV == Model.TkbHocPhans.Where(r => r.MaHP == row[j].MaHP && r.NhomTo == row[j].NhomTo).Max(r => r.SoSV) ? "border-color:red" : null;
                                            <div id="hocPhan" title="@title" class="col-offset-@offset col-@row[j].SoTiet" style="border-style:groove;padding-left:0;z-index:@(zIndex++);background:@Colors[row[j].NhomTo];@border">
                                                <a href="#" data-pk="@row[j].id" data-value="@(giangVien != null ? String.Format("{0} - {1}", giangVien.HoTen, giangVien.MaGV) : null)" data-type="typeaheadjs" data-placement="right"></a>
                                            </div>
                                            j += row[j].SoTiet - 1;
                                            offset = 0;
                                        }
                                        else { offset++; }
                                    }
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>

@section Scripts {
    <script>
        function toggle(maHP) {
            $(`[id=${maHP}]`).toggle();
        }
        var MaHP = [@MvcHtmlString.Create(String.Join(",", Model.TkbHocPhans.Select(hp => "'"+hp.MaHP+"'").Distinct().ToArray()))];
        function toggleAll() {
            var show = $('tbody').find('tr:visible').length > 0;
            MaHP.forEach(function (maHP) {
                $(`a[id=${maHP}]`).toggle(show);
                $(`tr[id=${maHP}]`).toggle(!show);
            });
        }
        $('#checkColor').change(function () {
            if (this.checked) {
                $('div[id=hocPhan]').each(function () {
                    $(this).css('background', $(this).attr('background'));
                    $(this).find('a').css('color', $(this).find('a').attr('color'));
                });
            } else {
                $('div[id=hocPhan]').each(function () {
                    var color = $(this).css('background');
                    $(this).attr('background', color);
                    $(this).css('background', 'white');
                    $(this).find('a').each(function () {
                        var color = $(this).css('color');
                        $(this).css('color', '');
                        $(this).attr('color', color);
                    })
                });
            }
        });
        $('div[id=hocPhan]').each(function () {
            var C = $(this).css('background-color').toLowerCase().replace('rgb(', '').replace(')', '').split(', ');
            for (var i = 0; i < C.length; ++i) {
                C[i] = C[i] / 255;
                if (C[i] <= 0.03928)
                    C[i] = C[i] / 12.92;
                else
                    C[i] = Math.pow((C[i] + 0.055) / 1.055, 2.4);
            }
            L = 0.2126 * C[0] + 0.7152 * C[1] + 0.0722 * C[2];
            if (L > 0.179)
                $(this).find('a').css('color', 'black');
            else
                $(this).find('a').css('color', 'white');
        });
    </script>
    <script>
        $(function () {
            $('[data-type=typeaheadjs]').editable({
                url: '@Url.Action("SetGiangVienHocPhan", "TkbThongKe")',
                typeahead: {
                    local: [@MvcHtmlString.Create(String.Join(",", GiangVien.Select(gv => String.Format("'{0} - {1}'", gv.HoTen, gv.MaGV)).ToArray()))]
                },
                title: 'Chọn giảng viên',
                display: function (value) {
                    if (!value) {
                        $(this).empty();
                        return;
                    }
                    array = value.split('-')[0].trim().split(' ');
                    value = '';
                    for (var i = 0; i < array.length - 1; i++)
                        value = value + array[i][0];
                    value = value + array[array.length - 1];
                    $(this).html('<b>' + value + '</b>');
                }
            });
        });
    </script>
    <script>
        const nodeMap = {};
        // create an observer instance
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                if (mutation.addedNodes.length == 1) {
                    var node = $(mutation.addedNodes[0]).parent('div');
                    node.css('z-index', node.css('z-index') * 100);
                    nodeMap[mutation.addedNodes[0].id] = node;
                }
                if (mutation.removedNodes.length == 1) {
                    var node = nodeMap[mutation.removedNodes[0].id];
                    node.css('z-index', node.css('z-index') / 100);
                }
            });
        });
        // configuration of the observer:
        var config = { attributes: true, childList: true, characterData: true }
        // pass in the target node, as well as the observer options
        $(function () {
            $('div[id=hocPhan]').each(function () {
                observer.observe(this, config);
            });
        })
    </script>

    <style>
        .sticky {
            top: 50px;
            position: fixed;
        }
    </style>
    <script>
        var sticky = $('#table2').offset().top;
        var header = $('#table1').hide().width($('#table2').width());
        window.onscroll = function () {
            if (window.pageYOffset > sticky) {
                header.addClass("sticky").show();
            } else {
                header.removeClass("sticky").hide();
            }
        }

        $('#table2').delegate('td', 'mouseover mouseleave', function (e) {
            if (e.type == 'mouseover') {
                $(this).parent().addClass('hover');
                $('colgroup').eq($(this).index()).addClass('hover');
            }
            else {
                $(this).parent().removeClass('hover');
                $('colgroup').eq($(this).index()).removeClass('hover');
            }
        });
    </script>
}